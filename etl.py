# -*- coding: utf-8 -*-
"""ETL

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UAwr81XWUDyF7-Vex_EAq1tiFOwnaK-s
"""

import pandas as pd
import numpy as np
import requests
from io import StringIO
import subprocess
import tarfile

# Detectar si se está en Google Colab
try:
    from google.colab import files
    colab = True
except ImportError:
    colab = False

def celsius_to_fahrenheit(celsius):
    """Convierte temperatura de Celsius a Fahrenheit"""
    return (celsius * 9/5) + 32

def transform_data(url):
    print(" Descargando datos desde la URL...")
    try:
        df = pd.read_csv(url, encoding='utf-8', delimiter=';')
    except Exception as e:
        print(f" Error al leer el archivo: {e}")
        return None

    print(" Datos descargados correctamente.")
    print("\n Vista previa de los datos originales:")
    print(df.head())

    # Transformación
    print("\n Transformando datos...")
    columns_to_convert = ['T.Maxima', 'T.Minima']

    for col in columns_to_convert:
        if col in df.columns:
            try:
                df[col] = pd.to_numeric(df[col], errors='coerce')
                df[f"{col}_Fahrenheit"] = df[col].apply(celsius_to_fahrenheit)
                print(f" Convertida {col} a {col}_Fahrenheit")
            except Exception as e:
                print(f" Error al convertir {col}: {e}")
        else:
            print(f" Columna {col} no encontrada")

    output_file = "temperaturas_transformadas.csv"
    df.to_csv(output_file, index=False, sep=',', encoding='utf-8')
    return output_file

def generate_requirements():
    print("\n Generando requirements.txt...")
    with open('requirements.txt', 'w') as f:
        subprocess.run(['pip', 'freeze'], stdout=f)
    print(" requirements.txt generado:")
    with open('requirements.txt', 'r') as f:
        print(f.read())
    return "requirements.txt"

def generate_dockerfile(csv_file, req_file):
    dockerfile_content = f'''# Dockerfile para conversión de temperaturas
FROM python:3.9-slim

WORKDIR /app

# Instalar dependencias
COPY {req_file} .
RUN pip install -r {req_file}

# Copiar datos transformados
COPY {csv_file} /data/temperaturas_transformadas.csv

# Comando para verificar los datos
CMD ["bash", "-c", "echo 'Datos de temperatura convertidos:' && python -c \\"import pandas as pd; df = pd.read_csv('/data/temperaturas_transformadas.csv'); print(df.head())\\""]
'''

    with open('Dockerfile', 'w') as f:
        f.write(dockerfile_content)

    print("\n Dockerfile generado:")
    with open('Dockerfile', 'r') as f:
        print(f.read())

    # Crear paquete comprimido
    package_name = "temperatura_package.tar.gz"
    with tarfile.open(package_name, "w:gz") as tar:
        tar.add(csv_file)
        tar.add(req_file)
        tar.add("Dockerfile")

    return package_name

# Ejecución principal
if __name__ == "__main__":
    url = "https://datos.gob.cl/dataset/d1ab099f-c6ff-4d71-b956-0d1f674a42ac/resource/a047c361-1ee3-46bc-80b2-469c819f7266/download/temperatura_072020.csv"

    # Transformar datos
    csv_output = transform_data(url)
    if csv_output:
        # Generar archivos de configuración
        req_output = generate_requirements()
        package_file = generate_dockerfile(csv_output, req_output)

        # Descargar resultados
        print("\n Descargando paquete completo...")
        if colab:
            files.download(package_file)
        else:
            print(f" Archivo listo para ser descargado manualmente: {package_file}")

        print("\n ¡Proceso completado! Paquete con:")
        print("- CSV transformado")
        print("- requirements.txt")
        print("- Dockerfile")

